#include <stdlib.h>
#include <math.h>

#include "constant.h"
#include "math2.h"

double uAtt(double r, double sig, double T, double rc) {
	double rpMin;
	rpMin = pow(2,(1./6.))*sig;
	double u = 0.;
	if (r<rpMin) {
		u = -1.*(1/T);
	}
	else if (r>=rpMin && r<rc) {
		u = 4*(1/T)*(pow(sig/r,12)-pow(sig/r,6));
	}
	else {
		u = 0.;
	}
	return u;
}


double *c1Disp(double *rVec, double *denVec, double R, double dr, double sig, double T, double rc) {
	int i, j, k;
	int rpMaxIndex, rpMinIndex, rppMaxIndex, rppMinIndex, Np, Npp, nGrids;
	double r, rp, rpMax, rpMin, rpp, rppMax, rppMin;
	double den, u, xi, c;
	double *c1DispVec;
	double *funcVec, *bufFuncVec, *xiVec;

	nGrids = round(R/dr)+1;
	c1DispVec = (double*)malloc(nGrids*sizeof(double));
	for (i=0; i<nGrids; i++) {
		c1DispVec[i] = 0.;
	}

	
	for (i=1; i<nGrids; i++) {
		r = rVec[i];

		if (r >= rc) {
			rpMin = r-rc;
			rpMax = r+rc;
			if (rpMax>R) {
				rpMax = R;
			}
			rpMinIndex = round(rpMin/dr);
			rpMaxIndex = round(rpMax/dr);
			Np = (rpMaxIndex-rpMinIndex)+1;

			xiVec = (double*)malloc(Np*sizeof(double));
			for (j=0; j<Np; j++) {
				rp = rVec[rpMinIndex+j];

				if (r >= rp) {
					rppMin = r-rp; }
				else {
					rppMin = rp-r;
				}
				rppMax = rc;
				rppMinIndex = round(rppMin/dr);
				rppMaxIndex = round(rppMax/dr);
				Npp = (rppMaxIndex-rppMinIndex)+1;

				bufFuncVec = (double*)malloc(Npp*sizeof(double));
				for (k=0; k<Npp; k++) {
					rpp = rVec[rppMinIndex+k];
					u = uAtt(rpp,sig,T,rc);
					bufFuncVec[k] = rpp*u;
				}

				xiVec[j] = trapz(bufFuncVec,rppMin,rppMax,Npp);
			//	printf("%f\t%f\t%f\t%f\t%d\n",r,rp,rppMin,rppMax,Npp);
				free(bufFuncVec);
			}

			funcVec = (double*)malloc(Np*sizeof(double));
			for (j=0; j<Np; j++) {
				rp = rVec[rpMinIndex+j];
				den = denVec[rpMinIndex+j];
				xi = xiVec[j];
				funcVec[j] = rp*den*xi;
			}
			c = trapz(funcVec,rpMin,rpMax,Np);
			free(funcVec);
			free(xiVec);

			c1DispVec[i] += c*(2*PI/r);
	       	}
		
		else {
			// 1st integration
			rpMin = 0;
			rpMax = rc+r;
			rpMinIndex = round(rpMin/dr);
			rpMaxIndex = round(rpMax/dr);
			Np = (rpMaxIndex-rpMinIndex)+1;

			xiVec = (double*)malloc(Np*sizeof(double));
			for (j=0; j<Np; j++) {
				rp = rVec[rpMinIndex+j];

				if (r >= rp) {
					rppMin = r-rp; }
				else {
					rppMin = rp-r;
				}
				if (rp >= rc-r) {
					rppMax = rc; }
				else {
					rppMax = r+rp;
				}
				rppMinIndex = round(rppMin/dr);
				rppMaxIndex = round(rppMax/dr);
				Npp = (rppMaxIndex-rppMinIndex)+1;

				bufFuncVec = (double*)malloc(Npp*sizeof(double));
				for (k=0; k<Npp; k++) {
					rpp = rVec[rppMinIndex+k];
					u = uAtt(rpp,sig,T,rc);
					bufFuncVec[k] = rpp*u;
				}

				xiVec[j] = trapz(bufFuncVec,rppMin,rppMax,Npp);
			//	printf("%f\t%f\t%f\t%f\t%d\n",r,rp,rppMin,rppMax,Npp);
				free(bufFuncVec);
			}

			funcVec = (double*)malloc(Np*sizeof(double));
			for (j=0; j<Np; j++) {
				rp = rVec[rpMinIndex+j];
				den = denVec[rpMinIndex+j];
				xi = xiVec[j];
				funcVec[j] = rp*den*xi;
			}
			c = trapz(funcVec,rpMin,rpMax,Np);
			free(funcVec);
			free(xiVec);

			c1DispVec[i] += c*(2*PI/r);
	       	}
	}
	c1DispVec[0] = c1DispVec[1];
	/*
	FILE *f = fopen("disp.xvg", "w");
		if(f==NULL) { printf("File error!"); }
		else {
			for (i=0; i<nGrids; i++) {
				fprintf(f, "%d \t %f \n", i, c1DispVec[i]);
			}
		}
		fclose(f);
	*/
	//printf("check\n");exit(1);

	return c1DispVec;
}
